import pytest
from typing import List
from io import StringIO

from exploit import binaryutils as bu


def test_split_even():
    actual = bu.split("12345678", by=4)
    assert actual == "1234 5678"


def test_split_even_with_spaces():
    actual = bu.split("12 34 56 78", by=4)
    assert actual == "1234 5678"


def test_split_odd():
    actual = bu.split("1234567", by=4)
    assert actual == "123 4567"


def test_split_odd_with_spaces():
    actual = bu.split("12 34 56 7", by=4)
    assert actual == "123 4567"


def test_split_short():
    actual = bu.split("123", by=4)
    assert actual == "123"


def test_split_no_split():
    actual = bu.split("12345678", by=0)
    assert actual == "12345678"


def test_split_to_array_by_0():
    actual = bu.split_to_array("12345678", by=0)
    assert actual == ["12345678"]


def test_split_to_array_even():
    actual = bu.split_to_array("12345678", by=2)
    assert actual == ["12", "34", "56", "78"]


def test_split_to_array_odd():
    actual = bu.split_to_array("1234567", by=2)
    assert actual == ["1", "23", "45", "67"]


def test_split_to_array_binary_string():
    actual = bu.split_to_array("0b0101 1111 1010 0011", by=8)
    assert actual == ["01011111", "10100011"]


def test_shr_single_bit():
    expected = "0b0000 0001"
    value = 0b0000_0010

    shifted = bu.shr(value, numbits=1, bit_width=8)

    assert shifted == expected


def test_shr_multiple_bits():
    expected = "0b0000 0001"
    value = 0b0000_1000

    shifted = bu.shr(value, numbits=3, bit_width=8)

    assert shifted == expected


def test_shr_multiple_bits_long_stride():
    expected = "0b0000 0000 0000 0000 0000 0000 0000 0000 0111 0000 1101 0001 1000 0101 0110 0100"
    # bin: '0b0111 0000 1101 0001 1000 0101 0110 0100 0001 1110 0100 0111 1000 0011 0110 0110'
    value = 0x70d185641e478366

    shifted = bu.shr(value, numbits=32)

    assert shifted == expected


def test_shl_single_bit():
    expected = "0b0000 0010"
    value = 0b0000_0001

    shifted = bu.shl(value, numbits=1, bit_width=8)

    assert shifted == expected


def test_shl_multiple_bits():
    expected = "0b0000 1000"
    value = 0b0000_0001

    shifted = bu.shl(value, numbits=3, bit_width=8)

    assert shifted == expected


def test_shl_multiple_bits_long_stride():
    expected = "0b0011 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000"
    # bin: '0b0111 0000 1101 0001 1000 0101 0110 0100 0001 1110 0100 0111 1000 0011 0110 0110'
    value = 0x70d185641e478366

    shifted = bu.shl(value, numbits=59)

    assert shifted == expected


def test_to_bin():
    expected = "0b0000 0001"
    value = 0b0000_0001
    assert bu.to_bin(value, bit_width=8) == expected


def test_to_hex_single_byte_width():
    expected = "0x01"
    value = 0b0000_0001
    assert bu.to_hex(value, bit_width=8) == expected


def test_to_16bit_byte_width():
    expected = "0x00 01"
    value = 0b0000_0000_0000_0001
    assert bu.to_hex(value, bit_width=16) == expected


def test_to_32bit_byte_width():
    expected = "0x00 00 00 01"
    value = 0b0000_0000_0000_0001
    assert bu.to_hex(value, bit_width=32) == expected


def test_to_64bit_byte_width():
    expected = "0x00 00 00 00 00 00 00 01"
    value = 0b0000_0000_0000_0000_0000_0000_0000_0001
    assert bu.to_hex(value, bit_width=64) == expected


def test_to_bin_odd():
    expected = "0b0000 0001"
    value = 0b0000_001
    assert bu.to_bin(value, bit_width=8) == expected


def test_info():
    value = 0b0000_001
    stdout = StringIO()
    bu.info(value, stdout=stdout)
    lines: List[str] = stdout.readlines()
    assert lines[0] == "hex...: 0x00 00 00 00 00 00 00 01\n"
    assert lines[1] == "bin...: 0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0001\n"
    assert lines[2] == "dec...: 1\n"


def test_reversed_bytes():
    expected = "0xde c0 ad de 00 00 00 00"
    value = 0x00000000deadc0de
    reversed_bytes_value = bu.reverse_bytes(value)
    assert bu.to_hex(reversed_bytes_value, bit_width=64, group=2) == expected


def test_hex_bytes_to_ascii():
    expected = "password"
    value = "0x70 0x61 0x73 0x73 0x77 0x6f 0x72 0x64"

    assert bu.hex_bytes_to_ascii(value) == expected